# 

from pathlib import Path

import pandas as pd


PROMPT = '''Take a close look at this image and tell me everything you can about what you see. I'm curious to know how well it matches the original prompt used to generate it: '{prompt}'. Could you also rate the image on a scale of 0 to 5 for these aspects: overall quality, how well it reflects the prompt? Please provide the float type scores in a JSON format using these keys: 'image_quality_score', 'prompt_alignment_score'.'''

PROMPT_QUALITY = '''Take a close look at this AI-generated image and tell me everything you can about what you see. It's original prompt is: '{prompt}'. Could you please help to analyze the image's quality?'''

PROMPT_QUALITY = '''Please closely examine this AI-generated image and provide a detailed analysis of its content and quality. The original prompt for the image was: '{prompt}' What can you deduce about the image based on this prompt, and how would you assess its overall quality?'''

PROMPT_ALIGNMENT = '''Please closely examine this AI-generated image and provide a detailed analysis of how well it aligns with the original prompt: '{prompt}'.'''

PROMPT_QUALITY_2nd = '''Now based on your analysis, could you please help to rate the image based on it's overall quality? Please give me one word from the list [bad, poor, fair, good, excellent]. Notice that quality word in the list means from low to high.'''

PROMPT_QUALITY_2nd = '''Based on your analysis, could you please rate the image's overall quality? Choose one word from the following list: [bad, poor, fair, good, excellent], where the words range from low to high quality.'''

PROMPT_ALIGNMENT_2nd = '''Based on your analysis, could you please rate the image's alignment with its original prompt? Choose one word from the following list: [bad, poor, fair, good, excellent], where the words indicate the degree of alignment from low to high.'''

PROMPT_AUTHENTICITY = '''Please closely examine this AI-generated image and provide a detailed analysis of its authenticity. The original prompt for the image was: '{prompt}'. How closely does the image resemble real artworks or scenes? Highlight any parts of the image that appear non-real or artificial.
'''

PROMPT_AUTHENTICITY_2nd = '''Based on your analysis, could you please rate the image's authenticity? Choose one word from the following list: [bad, poor, fair, good, excellent], where the words indicate the degree of authenticity from low to high.'''

PROMPT_ALL = '''Please carefully analyze this AI-generated image based on the prompt: "{prompt}". Focus on the following three aspects: Quality, Alignment, and Authenticity.

Quality: Evaluate the overall quality of the image, considering composition, clarity, and any noticeable flaws.
Alignment: Assess how well the image aligns with the given prompt, noting which elements are accurately reflected and which may be missing or misinterpreted.
Authenticity: Discuss the image's resemblance to real artworks, highlighting any parts that appear artificial or unrealistic.
'''

PROMPT_Q_n_A = '''Please carefully analyze this AI-generated image based on the prompt: "{prompt}". Focus on the following two aspects: Quality, Alignment.

Quality: Evaluate the overall quality of the image, considering composition, clarity, and any noticeable flaws.
Alignment: Assess how well the image aligns with the given prompt, noting which elements are accurately reflected and which may be missing or misinterpreted.
'''


PROMPT_Q_n_Au = '''Please carefully analyze this AI-generated image based on the prompt: "{prompt}". Focus on the following two aspects: Quality, Authenticity.

Quality: Evaluate the overall quality of the image, considering composition, clarity, and any noticeable flaws.
Authenticity: Discuss the image's resemblance to real artworks, highlighting any parts that appear artificial or unrealistic.
'''

PROMPT_A_n_Au = '''Please carefully analyze this AI-generated image based on the prompt: "{prompt}". Focus on the following two aspects: Alignment, Authenticity.

Alignment: Assess how well the image aligns with the given prompt, noting which elements are accurately reflected and which may be missing or misinterpreted.
Authenticity: Discuss the image's resemblance to real artworks, highlighting any parts that appear artificial or unrealistic.
'''


import json
from tqdm import tqdm
# q+a
# q+a+u

TEMPLATE = PROMPT_ALL

data_path = Path('./data/agiqa-3k')
descriptor = pd.read_csv(data_path / 'data.csv', index_col='name')
# intermediate_answer = pd.read_csv(data_path / 'gemini_pro_analysis_explaination.csv', index_col="name")
image_dir = data_path / 'images'
# gemini_on_minicpmv2_5_train_all.json, 
# intermediate_answer generated by gemini pro and trained on minicpmv2.5
explaination_kv_file = data_path / 'gemini_pro_analysis_explaination_kv.json'
explaination_kv = json.load(explaination_kv_file.open())


original_train_file = data_path / 'directly_train_cls_minicpm_quality_multiround.jsonl'
original_test_file = data_path / 'directly_test_cls_minicpm_quality_multiround.jsonl'

original_train = json.load(original_train_file.open())
original_test = json.load(original_test_file.open())

new_train = []
new_test = []

def get_new_data(original_data, explaination_kv, descriptor, template=PROMPT_Q_n_A):
    new_data = []
    for i in tqdm(original_data):
        img_name = i['image'].split('/')[-1]
        if img_name in explaination_kv:
            i['conversations'][0]['content'] = template.format(prompt=descriptor.loc[img_name, 'prompt'])
            if template == PROMPT_Q_n_A:
                i['conversations'][1]['content'] = 'Quality: {quality}\n Alignment: {alignment}'.format(quality=explaination_kv[img_name]['quality'], alignment=explaination_kv[img_name]['alignment'])
                new_data.append(i)
            elif template == PROMPT_Q_n_Au:
                i['conversations'][1]['content'] = 'Quality: {quality}\n Authenticity: {authenticity}'.format(quality=explaination_kv[img_name]['quality'], authenticity=explaination_kv[img_name]['authenticity'])
                new_data.append(i)
            elif template == PROMPT_ALL:
                i['conversations'][1]['content'] = 'Quality: {quality}\n Alignment: {alignment}\n Authenticity: {authenticity}'.format(quality=explaination_kv[img_name]['quality'], alignment=explaination_kv[img_name]['alignment'], authenticity=explaination_kv[img_name]['authenticity'])
                new_data.append(i)
        else:
            print(f"image {img_name} not found in explaination_kv")
    return new_data

new_train = get_new_data(original_train, explaination_kv, descriptor, template=TEMPLATE)
new_test = get_new_data(original_test, explaination_kv, descriptor, template=TEMPLATE)

if TEMPLATE == PROMPT_Q_n_A:
    output_file = 'gemini_on_minicpmv2_5_{stage}_quality_n_align_on_quality.json'
elif TEMPLATE == PROMPT_Q_n_Au:
    output_file = 'gemini_on_minicpmv2_5_{stage}_quality_n_authenticity_on_quality.json'
elif TEMPLATE == PROMPT_ALL:
    output_file = 'gemini_on_minicpmv2_5_{stage}_quality_n_align_n_authenticity_on_quality.json'


with open(data_path / output_file.format(stage='train'), 'w') as f:
    json.dump(new_train, f, indent=4)

with open(data_path / output_file.format(stage='test'), 'w') as f:
    json.dump(new_test, f, indent=4)


